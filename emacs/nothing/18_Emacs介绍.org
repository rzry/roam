#+TITLE:     emacs test
#+AUTHOR:    rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2020-09-16
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg.setup
#+begin_export html
<div class="right">
<a href="https://github.com/rzry" class="fa fa-github"> Edit on GitHub</a>
</div>
#+end_export
* 前文 

*可能你习惯了vscode 习惯了sublime 习惯了VIm* 

*请你相信,当初我也是一个sublime的忠实粉丝*

*但是对于一个爱折腾的年轻人来说*

*写代码是一辈子的事,工欲善其事必先利其器*

*自从我在youtube看到emacs敲goalng*

*从那时起我已经爱上它ta了*

#+BEGIN_SRC 
一般我不会把emacs推荐给朋友,因为并不是所有人都像我这么爱折腾
而且目前sublime vscode的发展真的很棒了 
没有必要为了一个写代码的东西浪费那么多时间
当然,我并不会那样想,因为我的标题是 emacs系统
#+END_SRC
* 首先看一下工作环境吧
  [[./首先看一下工作环境吧/1.png]]
#+BEGIN_SRC
我就是这样写博客的  写完博客 只需要输入org-publish-project 
它就会自动帮我把org格式转换为html 当然 也可以转为pdf 等等
然后我只需要上传到git 你们就可以看到这篇文章了 ,是不是很方便
这就是org-mode 的优点,它的优点太多了
写博客,Gtd时间规划,记笔记,做思路整理,太多了
而每一个都是值得你去学习的东西 
#+END_SRC
* 贴一些我的配置 
#+begin_src emacs-lisp :tangle yes

  ;;
  ;; ivy mode
  ;;
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :config
    (ivy-mode 1)
    (setq ivy-use-virutal-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d")
    (setq ivy-re-builders-alist
          `((t . ivy--regex-ignore-order)))
    )




  ;;
  ;; counsel
  ;;
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("\C-x \C-f" . counsel-find-file)))

  ;;
  ;; swiper
  ;;
  (use-package swiper
    :ensure t
    :bind (("\C-s" . swiper))
    )

  ;;
  ;; yasnippet
  ;;
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode)
    (use-package yasnippet-snippets :ensure t)
    )



  ;;
  ;; company
  ;;
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-backends
          '((company-files
             company-yasnippet
             company-keywords
             company-capf
             )
            (company-abbrev company-dabbrev))))

  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (add-to-list  (make-local-variable 'company-backends)
                                                  '(company-elisp))))


  ;;
  ;; flycheck
  ;;

  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode t)
    )

  ;;
  ;; magit
  ;;
  (use-package magit
    :ensure t
    :bind (("\C-x g" . magit-status))
    )


  ;;
  ;; projectile
  ;;
  (use-package projectile
    :ensure t
    :bind-keymap
    ("\C-c p" . projectile-command-map)
    :config
    (projectile-mode t)
    (setq projectile-completion-system 'ivy)
    (use-package counsel-projectile
      :ensure t)
    )


  (use-package ag
    :ensure t)


  ;;
  ;; auto insert
  ;;
  (defun my/autoinsert-yas-expand()
    "replace text in yasnippet template"
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))


  (use-package autoinsert
    :ensure t
    :config
    (setq auto-insert-query nil)
    (setq auto-insert-directory (locate-user-emacs-file "templates"))
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode t)
    (define-auto-insert "\\.org$" ["default-org.org" my/autoinsert-yas-expand])
    (define-auto-insert "\\.js$" ["default-js.js" my/autoinsert-yas-expand])
    (define-auto-insert "\\.ts$" ["default-ts.ts" my/autoinsert-yas-expand])
    (define-auto-insert "\\.html?$" ["default-html.html" my/autoinsert-yas-expand])
    )
  ;; These are the main configurations 
#+end_src
* 单独配置 比如 golang


#+begin_src emacs-lisp :tangle yes

(use-package go-mode
  :ensure t
  :mode (("\\.go\\'" . go-mode))
  :hook ((before-save . gofmt-before-save))
  :config
  (setq gofmt-command "goimports")
  (use-package company-go
    :ensure t
    :config
    (add-hook 'go-mode-hook (lambda()
                              (add-to-list (make-local-variable 'company-backends)
                                           '(company-go company-files company-yasnippet company-capf))))
    )
  (use-package go-eldoc
    :ensure t
    :hook (go-mode . go-eldoc-setup)
    )
  (use-package go-guru
    :ensure t
    :hook (go-mode . go-guru-hl-identifier-mode)
    )
  (use-package go-rename
    :ensure t)
  )

;;
;; for guru setup scope
;;
(defun my/go-guru-set-current-package-as-main ()
    "GoGuru requires the scope to be set to a go package which
     contains a main, this function will make the current package the
     active go guru scope, assuming it contains a main"
    (interactive)
    (let* ((filename (buffer-file-name))
           (gopath-src-path (concat (file-name-as-directory (go-guess-gopath)) "src"))
           (relative-package-path (directory-file-name (file-name-directory (file-relative-name filename gopath-src-path)))))
      (setq go-guru-scope relative-package-path)))




(provide 'go)
;;; go.el ends here

#+end_src
#+BEGIN_SRC 
这就是所有的golang 的配置 里面包括了 自动补全 函数跳转 错误检查 自动填充import
等等 你能找到别的编辑器有的 我们都有 它们没有的 我们也有 
#+END_SRC
* 用emacs 看 pdf 
  [[./首先看一下工作环境吧/2.png]]
  
* 看网页
  [[./首先看一下工作环境吧/3.png]]
#+BEGIN_SRC 
我们常常会在chrome 查看文档,然后crud一些代码.这是我很乐意做的事情
但是每次切换窗口让我并不能很优雅的干这件事
所以我喜欢开第二个窗口,然后crud 
就像上图那样
操作也很简单 安装代码
#+END_SRC
#+begin_src emacs-lisp :tangle yes

;; w3m
;;(setq browse-url-browser-function 'w3m-browse-url)
(setq w3m-default-display-inline-images t)
(setq browse-url-browser-function 'w3m-browse-url
          browse-url-new-window-flag t)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; optional keyboard short-cut
(global-set-key "\C-xm" 'browse-url-at-point)
(global-set-key "\C-xe" 'browse-url)
(setq w3m-use-cookies t)

(setq w3m-default-display-inline-images t)
(setq w3m-default-toggle-inline-images t)

#+end_src
#+BEGIN_SRC 
可以再现看youtube 但是没有flash 所以我用这种方式来在黑框里看视频
emacs这样设置 
#+END_SRC
#+begin_src emacs-lisp :tangle yes

(defvar play-this-video-player "mpv --autofit=100%"
  "mplayer used to play the video")

(defun play-this-video ()
  (interactive)
  (let ((url (or w3m-current-url
                 (eww-current-url)
                 (error "only w3m and eww supported")))
        (player play-this-video-player))
    (shell-command (format "you-get %s -p '%s' &" url player))))
#+end_src
* 写博客 
  #+BEGIN_SRC 
  本片博客就是通过这个来写的, 写成org模式 转换为html 
  然后我会把他上传到git 那么你们就可以看到了 
  #+END_SRC
  #+begin_src emacs-lisp :tangle yes
  
 (require 'ox-publish)
  (setq org-publish-project-alist
        '(

         ("blog-notes"
   :base-directory "/home/rzry/rzry.github.io/blog/notes/"
   :base-extension "org"
   :publishing-directory "/home/rzry/rzry.github.io/blog/"
   :recursive t
   :publishing-function org-html-publish-to-html
   :headline-levels 4             ; Just the default for this project.
   :auto-preamble t
   :section-numbers nil
   :author "Rzry"
   :email "rzry36008@ccie.lol"
   :auto-sitemap t                ; Generate sitemap.org automagically...
   :sitemap-filename "index.org"  ; ... call it sitemap.org (it's the default)...
   :sitemap-title "Rzry's Blog"         ; ... with title 'Sitemap'.
   :sitemap-sort-files anti-chronologically
   :sitemap-file-entry-format "%d %t"


    
	:html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/>"
	

	
   )




           ("blog-static"
   :base-directory "/home/rzry/rzry.github.io/blog/notes/"
   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
   :publishing-directory "/home/rzry/rzry.github.io/blog/"
   :recursive t
   :publishing-function org-publish-attachment
   )


 ("blog" :components ("blog-notes" "blog-static"))
           
          ))
(setq org-src-fontify-natively t)

  #+end_src
* eshell , git , 等等
#+begin_src emacs-lisp :tangle yes

;;
;; magit
;;
(use-package magit
  :ensure t
  :bind (("\C-x g" . magit-status))
  )
#+end_src
