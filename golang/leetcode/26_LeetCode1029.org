#+TITLE:     LeetCode1029-两地调度
#+AUTHOR:    rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2020-09-16
#+LANGUAGE:  en

* 题目
  #+BEGIN_SRC
  公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。

  返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。

   

  示例：

  输入：[[10,20],[30,200],[400,50],[30,20]]
  输出：110
  解释：
  第一个人去 A 市，费用为 10。
  第二个人去 A 市，费用为 30。
  第三个人去 B 市，费用为 50。
  第四个人去 B 市，费用为 20。

  最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。
   

  提示：

  1 <= costs.length <= 100
  costs.length 为偶数
  1 <= costs[i][0], costs[i][1] <= 1000

  #+END_SRC
* 解析   (看大佬和官方的解法  简单的总结一下)
  #+BEGIN_SRC
  假设 有 4 个人  A B C D
  两个地点   西安 +  深圳 各位的花费如下
  A {10,20}  B {30,40} C{40,60} D{70,60}
  那我们要求最少的花费
  我们假设 所有的人都去 深圳  那么就是  20+40+60+60 = 180
  然后 我们再 找一下 看 那些人  去两地的价格差是最大的
  A -10    B -10  C -20  D 10    所以 它的排序 就是  C -- A and B --D
  所以 我们 的选择就是 把 C  和 A或者B 改变行程 让他们去 西安
  所以 最后的 value 就是  150

  代码思路 :
      每组切片的参数相减 排序
      让N/2 前的 去 西安
      让N/2 后的 去 深圳
  #+END_SRC
* 代码
  #+BEGIN_SRC go
  package main

import "fmt"

func twoCitySchedCost(costs [][]int) int {
	sum, lenCosts := 0, len(costs)    // 初始话
	for i := 0; i < lenCosts-1; i++ { // 排序
		min := i
		for j := i; j < lenCosts; j++ {
			if costs[j][0]-costs[j][1] < costs[min][0]-costs[min][1] { //  把每一个 传进来的 去a地 - 去b地 的值 排序
				min = j
				fmt.Println("if vlaue ", costs[j][0])
			}

		}
		temp := costs[i]
		costs[i] = costs[min]
		costs[min] = temp

	}
	fmt.Println("limt value ", costs)
	//排序 完之后  costs 就是一个  按照  a -b 的值 来排序的一个二维切片
	// 下面这个  比如这次的testing  4个值 排序完  我们让 前两个值 的[0] 相加
	// costs [0][0] + costs [1][0]相加
	//  如果大于2 的时候  就到 第三个数了 那么就用 第二个值来加
	// 就是  sum += costs[3][1]+costs[4][1]
	for i := 0; i < lenCosts; i++ {
		if i < lenCosts/2 {
			sum += costs[i][0]
		} else {
			sum += costs[i][1]
		}
		fmt.Println("now value ", costs[i])
	}
	fmt.Println(sum)
	return sum
}

func main() {
	consts := [][]int{{10, 20}, {30, 40}, {40, 60}, {70, 60}}
	twoCitySchedCost(consts)
}

  #+END_SRC

  #+RESULTS:
  : if vlaue  40
  : limt value  [[40 60] [30 40] [10 20] [70 60]]
  : now value  [40 60]
  : now value  [30 40]
  : now value  [10 20]
  : now value  [70 60]
  : 150
* 通用代码
  #+BEGIN_SRC go
  func twoCitySchedCost(costs [][]int) int {
	sum, lenCosts := 0, len(costs)    // 初始话
	for i := 0; i < lenCosts-1; i++ { // 排序
		min := i
		for j := i; j < lenCosts; j++ {
			if costs[j][0]-costs[j][1] < costs[min][0]-costs[min][1] { //  把每一个 传进来的 去a地 - 去b地 的值 排序
				min = j
				fmt.Println("if vlaue ", costs[j][0])
			}

		}
		temp := costs[i]
		costs[i] = costs[min]
		costs[min] = temp

	}
	fmt.Println("limt value ", costs)
}
  #+END_SRC

对切片 做差排序
