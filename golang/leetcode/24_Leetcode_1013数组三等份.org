#+TITLE:     LeetCode-1013-将数组分成和相等的三个部分
#+AUTHOR:    rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2020-09-16
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg.setup
#+begin_export html
<div class="right">
<a href="https://github.com/rzry" class="fa fa-github"> Edit on GitHub</a>
</div>
#+end_export
* 题目
#+BEGIN_SRC 
给定一个整数数组A，只有我们可以将其划分为三个和相等的非空部分时才返回true，否则返回 false。

形式上，如果我们可以找出索引i+1 < j且满足
(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1]) 就可以将数组三等分。

#+END_SRC

#+BEGIN_SRC 
示例 1：

输出：[0,2,1,-6,6,-7,9,1,2,0,1]
输出：true
解释：0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
示例 2：

输入：[0,2,1,-6,6,7,9,-1,2,0,1]
输出：false
示例 3：

输入：[3,3,6,5,-2,2,5,1,-9,4]
输出：true
解释：3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
#+END_SRC

* 思考过程 
** 分析  
   #+BEGIN_SRC 
 题目说的  数组  必须是要按照顺序 比如示例中 11 个数  只能 前几个 +
 不能 第一个 + 第三个这种加 
 所以 我们 要能整分 3份 所以先判断整体能不能  
 1 .  求和  然后 分三分 能不能整除 
 2 . 我的做法是 看着解析的思路 求前后两头  然后 只要前后都等于  除3 的值 
     那么肯定就可以整分了  如果不行就肯定是  false 
   #+END_SRC 
** 代码 

   #+BEGIN_SRC go
package main

import "fmt"

func canThreePartsEqualSum(A []int) bool {
	var All, value int
	for _, value = range A {
		All += value

	}
	if All%3 != 0 {
		return false
		fmt.Println("不能够整除")
	}
	fmt.Println("能够整除")
	res := All / 3 //res 就是三等份的值

	i := 0
	j := len(A) - 1
	fmt.Println(len(A))
	rue := false // 初始话一个返回的值
	lans, rans := 0, 0

	for i < j {
		if lans != res {
			lans += A[i]
			i += 1
		}
		if rans != res {
			rans += A[j]
			j -= 1
		}
		if (lans == res) && (rans == res) {
			rue = true
			break
		}
	}

	return rue

}

func main() {
	arr := []int{0, 2, 2, -6, 6, -7, 10, 1, 2, 0, 1}
	res := canThreePartsEqualSum(arr)
	fmt.Println(res)
}
   #+END_SRC

   #+RESULTS:
   : false
   


