#+TITLE:     Terra
#+AUTHOR:    rzry https://github.com/rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2021-03-01
#+LANGUAGE:  en
* 构建
** 配置
  - install docker and docker-compose
    #+begin_src shell
install-docker-compose() {
  echo "install docker-compose"
  version=${1:-1.25.5}
  curl -L "https://github.com/docker/compose/releases/download/${version}/docker-compose-$(uname -s)-$(uname -m)/" -o /tmp/docker-compose &&
  chmod +x /tmp/docker-compose &&
  sudo mv /tmp/docker-compose /usr/local/bin/docker-compose
}

install-docker() {
  echo "install docker"
  sudo apt-get update &&
  sudo apt-get -y install curl apt-transport-https ca-certificates software-properties-common &&
  (curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -) &&
  sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable" &&
  sudo apt-get update &&
  sudo apt-get -y install docker-ce &&
  sudo usermod -aG docker $USER
}
    #+end_src

  - install go and rust
    #+begin_src shell
install-golang() {
  echo "install golang"
  version=${1:-1.14.5}
  name="go${version}.${platform}-amd64.tar.gz"
  curl -L https://dl.google.com/go/$name -o /tmp/$name
  sudo tar xzf /tmp/$name -C /usr/local && rm /tmp/$name
}
install-rust() {
  echo "install rust"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}
    #+end_src

  - 下载.
    #+begin_src shell
    #local terra
    1. git clone https://github.com/terra-project/localterra && cd localterra
    2. docker-compose up -d
    #set rust
    3. rustup default stable
    4. rustup target add wasm32-unknown-unknown
    5. cargo install cargo-generate --features vendored-openssl
    #build terra-cli
    6. cd .. && git clone https://github.com/terra-project/core && cd core && git checkout master
    7. make build && cd build

    #在编译好以后  你可以看到terracli terrad 两个文件
    #+end_src
** 运行本地测试网络
   #+begin_src
   1. 初始化将引导网络的 genesis 文件。为您的本地 testnet 设置一个名字，
      并提供一个名字对象来引用节点
      terrad init --chain-id=terra_net_test terra_node_test
   #+end_src
   [[./pic/terra-init.png]]
   #+begin_src
   2. 你需要一个 Terra 账户来启动，你可以用以下方法生成一个:
   terracli keys add terra_account_name

   记住这个 address
   address: terra1rttq84xsdagu65fqrcxcvcsjwx0zk79j47ljn5
   pubkey: terrapub1addwnpepqf8589em9033xyxrm7gdjwychm34a3xymqevnht5ak060rmvsepesvd3ngm
   #+end_src
   [[./pic/terra-keys.png]]
   #+begin_src
   3. 接下来，需要添加您的帐户创世纪。下面的命令添加您的帐户并设置初始余额:
   terrad add-genesis-account $(terracli keys show terra_account_name -a) 100000000uluna,1000usd
   terrad gentx --name terra_account_name --amount 10000000uluna
   terrad collect-gentxs
   #+end_src
   [[./pic/terrad-add-genes.png]]
   #+begin_src
   4. 运行 Terra 守护进程
   terrad start
   #+end_src
   [[./pic/start-terrad.png]]


** 运行完整 Wormhole node(在ubuntu/ arch 测试..)
*** 完整的 Solana-validator 节点
    - Install the Solana release
      #+begin_src shell
      sh -c "$(curl -sSfL https://release.solana.com/v1.5.14/install)"

      echo "export PATH=\"/home/vm/.local/share/solana/install/active_release/bin:\$PATH\"" >> ~/.zshenv

      source ~/.zshenv

      solana --version
      #+end_src
     - 生成钱包地址
       #+begin_src shell
       solana-keygen new  -o mywalt.json

       # pubkey: CsMUS369FdXsT9YFKCSqBYcpEdDvgpCTr5rmMRuALZTT
       # blouse cheap menu ensure nation mesh ostrich edit sense debate ball despair

       
       #+end_src


*** Ethereum (轻节点/完整节点)

*** Terra 需要一个完整的节点和一个指向完整节点的 LCD 服务器


*** Building guardiand 虫洞桥节点


*** Key Generation 生成守护秘钥

*** 创建 service


** terracli
   #+begin_src

   #+end_src


** wormhole solana
*** eth --> sol
   [[./pic/ethTosol.png]]
**** code
     - vaatransfer
     #+begin_src solidity
     // call data --> 链来源,目标链
       uint8 source_chain = data.toUint8(4);
       uint8 target_chain = data.toUint8(5);
     //目标地址
       address target_address = data.toAddress(38 + 12);
     // token_chain --> data.toUint8(70)
     // amount --> data.toUint8(104)
     // ---- handle func
     if (token_chain != CHAIN_ID){
         // 1 . token address --> data.toBytes32(71)
         // 2 . asset_id --> keccak256(..)
         // 3 . wrapped_asset --> wrappedAsset[asset_id]
         //如果 ewrappd_asset 存在 就为 target_address 地址 mint amount token
         // 否则 就create and mint
     }
     // create --> ldeployWarappedAsset
     //1 . 发送这,token链,token地址,数量  返回交易地址
     //2 . 调用 wrappedAsset.initialize
     #+end_src

     - submitVaa
     #+begin_src solidity
     //提交  guardians 签名后的 vaa 用于执行其他操作
     #+end_src

     - vaaUpdateGuardianSet
     #+begin_src solidity
     //更新 guardians 签名后的vaa
     #+end_src

*** Transfer of assets Foreign Chain -> Root Chain
   [[./pic/ForeignToRootChain.png]]
*** sol --> eth
   [[./pic/solToeth2.png]]
**** code
     #+begin_src solidity
     #+end_src
*** Transfer of assets Root Chain -> Foreign Chain
   [[./pic/RootToForeignToChain.png]]
