#+TITLE:     2020-09
#+AUTHOR:    rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2020-09-15
#+LANGUAGE:  en


* map

  #+BEGIN_SRC

  map --- > 底层是 hmap  有着若干个bucket数组 ,
  ----> 一个bucket保存8组 k-v ,超过8个就会 hash冲突
  会在extra字段结构体中的 overflow 使用链地址法一直拓展下去

  如果key超过8个就会映射到相同的桶 hash 冲突 -->开放寻址或者链表法


  #+END_SRC


  #+caption: hmap
  | <名称>     | <类型>         | <释义>          |
  | count      | int            | 数量            |
  | flags      | uint8          |                 |
  | B          | uint8          | 包含2^B个bucket |
  | noverflow  | uint8          | 溢出的bucket    |
  | hash0      | uint32         | hash 种子       |
  | buckets    | unsafe.pointer | buckets的指针   |
  | oldbuckets | unsafe.pointer | 扩容时用的数组  |
  | nevacuate  | uintptr        | 进度            |
  | extra      | *mapextra      |                 |
  |------------+----------------+-----------------|

  #+BEGIN_SRC
  B --->  如果H.b 小于 16  -- > noverflow ++ return
  如果 H.b 大于 16 --->  { uint32(1) >> (b-15) -1} 的值  fastrand() ==0
  ----> noverflow ++
  #+END_SRC

  #+caption: bucket map
  | <名称>          | <类型>                    | <释义>                    |
  | topush          | [bucketCnt]uint8          | 让查找key更快             |
  |                 |                           | 类似打tag的方式           |
  | hap并非只有一个 | tophash 是紧跟8组kv的模式 | 使overflow 成为链表结构   |
  |                 |                           | key0key1key2 val1val2val3 |
  |-----------------+---------------------------+---------------------------|

** make map
*** make(map[string]string, 0/B<8)

    #+BEGIN_SRC go

    func makemap_small() *hmap {
        h := new(hmap)
	h.hash0 = fastrand()
	return h
    }
    // hint 如果为0或者小于8 那么调用_small
    // 创建一个 hmap的结构体 初始化hash因子
    #+END_SRC

*** make(map[string]string,9)

    #+BEGIN_SRC
    1 . h == nil 初始话 hmap  new(hamp)
    2 . h.hash0 = fastrand() 初始话hash因子
    3 . 判断B 的大小 , B++ 会调用 overLoadFactor(hint,0)true .
    4 . 确定h.B 的个数后 分配内存 makeBucketArray(t,h.B,nil)
    #+END_SRC

*** make map 的 ques
    #+BEGIN_SRC
    1 . var Mp map[string]int ----> nil map 不可以赋值
    2 . makemap 返回的是一个 *hmap slice 是一个 struct
    #+END_SRC

** delete map
   #+BEGIN_SRC go
   func mapdelete(t *maptype, h *hmap, key unsafe.Pointer){}

   //1 . 检查标志位  h.flag 是否并发写入
   // 清除key
   if t.indirectkey() {
	*(*unsafe.Pointer)(k) = nil
   } else if t.key.ptrdata != 0 {
        memclrHasPointers(k, t.key.size)
   }
   e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
   //清除value
   if t.indirectelem() {
        *(*unsafe.Pointer)(e) = nil
   } else if t.elem.ptrdata != 0 {
        memclrHasPointers(e, t.elem.size)
   } else {
        memclrNoHeapPointers(e, t.elem.size)
   }
        b.tophash[i] = emptyOne

   #+END_SRC
*** delete map 的 ques
   #+BEGIN_SRC
   1 . 不可以并行读写 , 可以加锁 .
   读之前调用 RLock() 函数，读完之后调用 RUnlock() 函数解锁
   写之前调用 Lock() 函数，写完之后，调用 Unlock() 解锁。
   #+END_SRC



* sync 同步原语
** Mutex
   #+BEGIN_SRC

   1 . 结构
   type Mutex struct{
      state int32
      sema  uint32
   }

   2 . 状态
   {
     1 . MutexLocked ---> 表示锁定
     2 . MutexWoken  ---> 从正常被唤醒
     3 . MutexStarving --- > 从互斥到饥饿状态
     4 . waitersCount  ----> 在互斥锁等的G的个数
   }

   3 . 因为刚被唤起的Goroutine 与 新的 Goroutine
       竞争时很容易得不到锁,所以把一个goroutine超过1ms
       没有获取到锁,它就会将当前互斥锁切换饥饿模式,防止
       部分goroutine被饿死
   #+END_SRC

** Mutex waitGroup

   #+BEGIN_SRC go :imports '("testing" "sync") :main='"no" :package mutex
   func TestDc(t *testing.T){
   //waitGroup 一个等待的标志吧
	wg := sync.WaitGroup{}
   //开启两个核心
	runtime.GOMAXPROCS(2)
   //给他加100 个  --> 到 0 就会 结束
	wg.Add(100)
	for i:=0;i<100;i++{
		t.Log("第",i,"次")
		go func() {
			t.Log("1")
		}()
		go func() {
			t.Log("2")
		}()

		go func() {
			t.Log("3")
		}()
		wg.Done() // done 就是 -1 , 100-1
		time.Sleep(1*time.Second)
	}

	wg.Wait() // wait 就结束
   }
   func main(){
       TestDc()
   }
   //ques 每次都是 下面那个go func 执行
   #+END_SRC

   #+BEGIN_SRC go :imports '("fmt")
   func main(){
      fmt.Println("hello")
   }
   #+END_SRC

   #+RESULTS:
   : hello



** Mutex

* sync.map
  #+BEGIN_SRC go


  #+END_SRC
