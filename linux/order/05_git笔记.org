#+TITLE:     git的使用笔记
#+AUTHOR:    rzry
#+EMAIL:     rzry36008@ccie.lol
#+DATE:      2020-09-16
#+LANGUAGE:  en

* 命令笔记
** 初始化
   git init //创建

   git clone /path/to/repository //检出

   git config --global user.email "you@example.com" //配置email

   git config --global user.name "Name" //配置用户名

** 操作
   git add <file> // 文件添加，A → B

   git add . // 所有文件添加，A → B

   git commit -m "代码提交信息" //文件提交，B → C

   git commit --amend //与上次commit合并, *B → C

   git push origin master //推送至master分支, C → D

   git pull //更新本地仓库至最新改动， D → A

   git fetch //抓取远程仓库更新， D → C

   git log //查看提交记录

   git status //查看修改状态

   git diff//查看详细修改内容

   git show//显示某次提交的内容

** 撤销操作
   git reset <file>//某个文件索引会回滚到最后一次提交， C → B

   git reset//索引会回滚到最后一次提交， C → B

   git reset --hard // 索引会回滚到最后一次提交， C → B → A

   git checkout // 从index复制到workspace， B → A

   git checkout -- files // 文件从index复制到workspace， B → A

   git checkout HEAD -- files // 文件从local repository复制到workspace， C → A

** 分支相关
   git checkout -b branch_name //创建名叫“branch_name”的分支，并切换过去

   git checkout master //切换回主分支

   git branch -d branch_name // 删除名叫“branch_name”的分支

   git push origin branch_name //推送分支到远端仓库

   git merge branch_name // 合并分支branch_name到当前分支(如master)

   git rebase //衍合，线性化的自动， D → A

** 冲突处理
   git diff //对比workspace与index

   git diff HEAD //对于workspace与最后一次commit

   git diff <source_branch> <target_branch> //对比差异

   git add <filename> //修改完冲突，需要add以标记合并成功

** 其他
   gitk //开灯图形化git

   git config color.ui true //彩色的 git 输出

   git config format.pretty oneline //显示历史记录时，每个提交的信息只显示一行

   git add -i //交互式添加文件到暂存区

* 多人操作
  | 建立分支             | git branch ...                 | git branch ...                                     |
  | 查看分之             | git branch                     |                                                    |
  | 推送到远端           | git push origin ...            |                                                    |
  | 创建远程仓库到本地   | git checkout -b ... origin/... |                                                    |
  | 修改项目             | git add Hello.txt              | git commit -m"提交Hello.txt"                       |
  | 合并到 master        | git checkout master            | git merge --no-ff -m"写合并分支的commit" ...       |
  | 推送master到远程仓库 | git push origin master         | git push origin ... 当然你可以把自己的分之推到远程 |
  | 冲突下面讲           |                                |                                                    |
  |                      |                                |                                                    |

* 实操
** ① 创建版本库
   通过git init命令把这个目录变成Git可以管理的仓库

*** 第一步，用命令git add告诉Git，把文件添加到仓库：

   $ git add readme.txt

   执行上面的命令，没有任何显示，这就对了，

*** 第二步
   用命令git commit -m "xxx" 告诉Git，把文件提交到仓库，-m后面输入的是本次提交的说明，能从历史记录里方便地找到改动记录。

** ② 添加远程库
   git remote add origin git@github.com:tcyfree/test.git(或https://github.com/tcyfree/test.git，用git@比https快)

   添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

*** 下一步，就可以把本地库的所有内容推送到远程库上：
   $ git push -u origin master
   把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
   由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支
   还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

*** 总结：
   从现在起，只要本地作了提交，就可以通过命令：git push origin master
   把本地master分支的最新修改推送至GitHub
   要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
   关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
   此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

   分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

** ③ 从远程库克隆(我都是用这种)
   上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。
   现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
   要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
   Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
* 场景操作
** 时光机穿梭
   1.要随时掌握工作区的状态，使用git status命令。
   2.如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
** 版本回退
   1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
   2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
   3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

   git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

** 撤销修改
   场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

   场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
   （git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。）

** 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

** 删除文件
   1.命令git rm用于删除一个文件。
   2.确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

   $ git rm test.txt

   rm 'test.txt'

   $ git commit -m "remove test.txt"

   [master d17efd8] remove test.txt

   1 file changed, 1 deletion(-)

   delete mode 100644 test.txt
   现在，文件就从版本库中被删除了

   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
   git pull：相当于是从远程获取最新版本并merge到本地
   git pull origin master
   上述命令其实相当于git fetch 和 git merge
   在实际使用中，git fetch更安全一些
   因为在merge前，我们可以查看更新情况，然后再决定是否合并

** 创建与合并分支
   截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交
   而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
   #+DOWNLOADED: file:///home/rzry/%E6%A1%8C%E9%9D%A2/2788368620-56d53c3dc9af9_articlex.png @ 2019-08-29 10:31:25
   [file:%E5%9C%BA%E6%99%AF%E6%93%8D%E4%BD%9C/2788368620-56d53c3dc9af9_articlex_2019-08-29_10-31-25.png]

** git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

   $ git branch dev

   $ git checkout dev

   Switched to branch 'dev'

   然后，用git branch命令查看当前分支：

   $ git branch

   *dev

   master

   git branch命令会列出所有分支，当前分支前面会标一个*号。
   假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

** 多人协作
  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。

  要查看远程库的信息，用git remote或者，用git remote -v显示更详细的信息。

  并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

  master分支是主分支，因此要时刻与远程同步；

  dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

  bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

  feature分支是否推到远程，取决于你是否需要和其他人一起协作。

  总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
  多人协作的工作模式通常是这样：

  首先，可以试图用git push origin branch-name推送自己的修改；

  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

  如果合并有冲突，则解决冲突，并在本地提交；

  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建
  用命令git branch --set-upstream branch-name origin/branch-name。
*** 小结
    查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

    这就是多人协作的工作模式，一旦熟悉了，就非常简单。

* 忽略特殊文件

  有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。

  在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

  忽略文件的原则是：

  忽略操作系统自动生成的文件，比如缩略图等；
  忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
  忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
